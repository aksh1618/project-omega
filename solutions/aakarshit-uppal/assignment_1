#!/usr/bin/env python3
"""Takes arguments and prints them as JSON.

Supports a command and a subcommand (both optional), a required integer
argument 'key', an optional string argument 'name', a verbose argument and two
mutually exclusive arguments, local and remote, which set 'local' to true or
false, respectively.

Any arguments not used are not included in JSON.
"""

import argparse  # For ArgumentParser
import json  # For dumps - converts to JSON String

# Create Parser
parser = argparse.ArgumentParser(description='Parse Command Line to JSON')

# Add Arguments
parser.add_argument('command', nargs='?', type=str, help='Main Command')
parser.add_argument(
    'subcommand', nargs='?', type=str, help='Secondary Command')
parser.add_argument(
    '--key', '-k', type=int, help='Key Integer', metavar='integer',
    required=True)
parser.add_argument('--name', type=str, help='Name String', metavar='string')
parser.add_argument(
    '--verbose', '-V', help='Enable Details', action='store_true',
    default=None)

# Use Mutually Exclusive Group for conflicting arguments
connection_group = parser.add_mutually_exclusive_group()
connection_group.add_argument(
    '--local', '-L', help='Set as Local', action='store_true', default=None)
connection_group.add_argument(
    '--remote', '-R', dest='local', help='Set as Remote', action='store_false')

# Parse and convert to dictionary
args = parser.parse_args()
args_dict = vars(args)
args_json = json.dumps(args_dict)

# Remove null elements
short_dict = dict(args_dict)
for item in args_dict:
    if args_dict[item] is None:
        del short_dict[item]

# Convert to JSON string
short_json = json.dumps(short_dict)
print(short_json)
